name: Astrology AI - Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          # First release - get all commits
          CHANGELOG=$(git log --pretty=format:"* %s (%h)" --reverse)
        else
          # Get commits since last tag
          CHANGELOG=$(git log --pretty=format:"* %s (%h)" $LAST_TAG..HEAD --reverse)
        fi
        
        # Save changelog to file for GitHub release
        echo "## What's Changed" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "$CHANGELOG" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Statistics" >> CHANGELOG.md
        
        # Add current statistics if available
        cd astrology_ai
        if python -c "from src.cli import cli; cli(['stats'])" 2>/dev/null; then
          python -c "from src.cli import cli; cli(['stats'])" >> ../CHANGELOG.md 2>/dev/null || echo "Statistics not available" >> ../CHANGELOG.md
        else
          echo "Statistics not available in this release" >> ../CHANGELOG.md
        fi
        
        echo "CHANGELOG_FILE=CHANGELOG.md" >> $GITHUB_OUTPUT
    
    - name: Create source distribution
      run: |
        # Create a clean source distribution
        mkdir -p dist/astrology-ai-${{ steps.get_version.outputs.VERSION }}
        
        # Copy source files
        cp -r astrology_ai dist/astrology-ai-${{ steps.get_version.outputs.VERSION }}/
        cp requirements.txt dist/astrology-ai-${{ steps.get_version.outputs.VERSION }}/
        cp README.md dist/astrology-ai-${{ steps.get_version.outputs.VERSION }}/
        cp LICENSE dist/astrology-ai-${{ steps.get_version.outputs.VERSION }}/ 2>/dev/null || true
        
        # Copy documentation
        cp EXTRACTION_IMPROVEMENTS.md dist/astrology-ai-${{ steps.get_version.outputs.VERSION }}/ 2>/dev/null || true
        cp IMPROVEMENTS.md dist/astrology-ai-${{ steps.get_version.outputs.VERSION }}/ 2>/dev/null || true
        
        # Create archive
        cd dist
        tar -czf astrology-ai-${{ steps.get_version.outputs.VERSION }}-source.tar.gz astrology-ai-${{ steps.get_version.outputs.VERSION }}
        zip -r astrology-ai-${{ steps.get_version.outputs.VERSION }}-source.zip astrology-ai-${{ steps.get_version.outputs.VERSION }}
    
    - name: Create knowledge base export
      run: |
        cd astrology_ai
        
        # Try to export current knowledge base if it exists
        if [ -f "data/astrology_rules.db" ]; then
          python -m src.cli export-knowledge ../dist/knowledge-base-${{ steps.get_version.outputs.VERSION }}.json || echo "Knowledge base export failed"
        else
          echo "No knowledge base found for export" > ../dist/knowledge-base-${{ steps.get_version.outputs.VERSION }}.txt
        fi
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.TAG }}
        release_name: Astrology AI ${{ steps.get_version.outputs.TAG }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
    
    - name: Upload source tarball
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/astrology-ai-${{ steps.get_version.outputs.VERSION }}-source.tar.gz
        asset_name: astrology-ai-${{ steps.get_version.outputs.VERSION }}-source.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload source zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/astrology-ai-${{ steps.get_version.outputs.VERSION }}-source.zip
        asset_name: astrology-ai-${{ steps.get_version.outputs.VERSION }}-source.zip
        asset_content_type: application/zip
    
    - name: Upload knowledge base
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/knowledge-base-${{ steps.get_version.outputs.VERSION }}.json
        asset_name: knowledge-base-${{ steps.get_version.outputs.VERSION }}.json
        asset_content_type: application/json
      continue-on-error: true  # Don't fail if knowledge base export doesn't exist
    
    - name: Notify success
      run: |
        echo "ðŸŽ‰ Release ${{ steps.get_version.outputs.TAG }} created successfully!"
        echo "ðŸ“¦ Release URL: ${{ steps.create_release.outputs.html_url }}"
        echo "ðŸ“Š Assets uploaded:"
        echo "  - Source code (tar.gz and zip)"
        echo "  - Knowledge base export (if available)" 